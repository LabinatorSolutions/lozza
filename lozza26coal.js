
(function() {

  //{{{  v8
  
  const v8 = require('node:v8');
  
  v8.setFlagsFromString('--use-strict');
  //v8.setFlagsFromString('--trace-gc');
  //v8.setFlagsFromString('--trace-deopt');
  //v8.setFlagsFromString('--trace-deopt-verbose');
  
  //}}}
  //{{{  twister
  //
  // https://en.wikipedia.org/wiki/Mersenne_Twister
  //
  
  let twisterList  = new Uint32Array(624);
  let twisterIndex = 0;
  
  function twisterInit(seed) {
  
    const mt = twisterList;
  
    mt[0] = seed >>> 0;
  
    for (let i = 1; i < 624; i++) {
      mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
    }
  }
  
  function twisterFill() {
  
    const mt = twisterList;
  
    for (let i = 0; i < 624; i++) {
      let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
      mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
      if (y % 2 !== 0) {
        mt[i] ^= 0x9908B0DF;
      }
    }
  }
  
  function twisterRand() {
  
    const mt = twisterList;
  
    if (twisterIndex === 0)
      twisterFill();
  
    let y = mt[twisterIndex];
    y ^= y >>> 11;
    y ^= (y << 7)  & 0x9D2C5680;
    y ^= (y << 15) & 0xEFC60000;
    y ^= y >>> 18;
  
    twisterIndex = (twisterIndex + 1) % 624;
  
    return y >>> 0;
  }
  
  twisterInit(123456789);
  
  //}}}

  //{{{  constants
  
  const MAX_PLY = 128;
  const MATE    = 30000;
  
  const WHITE = 0x0;
  const BLACK = 0x8;
  
  const PIECE_MASK  = 0x7;
  const COLOUR_MASK = 0x8;
  
  const PAWN   = 1;
  const KNIGHT = 2;
  const BISHOP = 3;
  const ROOK   = 4;
  const QUEEN  = 5;
  const KING   = 6;
  const EDGE   = 7;
  
  const W_PAWN   = PAWN;
  const W_KNIGHT = KNIGHT;
  const W_BISHOP = BISHOP;
  const W_ROOK   = ROOK;
  const W_QUEEN  = QUEEN;
  const W_KING   = KING;
  
  const B_PAWN   = PAWN   | BLACK;
  const B_KNIGHT = KNIGHT | BLACK;
  const B_BISHOP = BISHOP | BLACK;
  const B_ROOK   = ROOK   | BLACK;
  const B_QUEEN  = QUEEN  | BLACK;
  const B_KING   = KING   | BLACK;
  
  const TT_SIZE  = 1 << 20;
  const TT_MASK  = TT_SIZE - 1;
  const TT_EXACT = 0x01;
  const TT_ALPHA = 0x02;
  const TT_BETA  = 0x04;
  
  const ADJACENT = [1,1,0,0,0,0,0,0,0,0,0,1,1,1];
  
  //
  // E == EMPTY, X = OFF BOARD, - == CANNOT HAPPEN
  //
  //                  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
  //                  E  W  W  W  W  W  W  X  -  B  B  B  B  B  B  -
  //                  E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K  -
  //
  const IS_O       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_E       = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_OE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  
  const IS_P       = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_N       = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_NBRQ    = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_NBRQKE  = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0];
  const IS_RQKE    = [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0];
  const IS_Q       = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_QKE     = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0];
  const IS_K       = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  const IS_KN      = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];
  const IS_SLIDER  = [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0];
  
  const IS_W       = [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WE      = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WP      = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WN      = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WNBRQ   = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQ  = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WPNBRQE = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WB      = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WR      = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WBQ     = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WRQ     = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WQ      = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  const IS_WK      = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const IS_B       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BE      = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
  const IS_BP      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
  const IS_BN      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  const IS_BNBRQ   = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQ  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BPNBRQE = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
  const IS_BB      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0];
  const IS_BR      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0];
  const IS_BBQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0];
  const IS_BRQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0];
  const IS_BQ      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
  const IS_BK      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];
  
  const OBJ_CHAR = ['.','P','N','B','R','Q','K','x','y','p','n','b','r','q','k','z'];
  
  const A1 = 110;
  const B1 = 111;
  const C1 = 112;
  const D1 = 113;
  const E1 = 114;
  const F1 = 115;
  const G1 = 116;
  const H1 = 117;
  const B2 = 99;
  const C2 = 100;
  const G2 = 104;
  const H2 = 105;
  const B7 = 39;
  const C7 = 40;
  const G7 = 44;
  const H7 = 45;
  const A8 = 26;
  const B8 = 27;
  const C8 = 28;
  const D8 = 29;
  const E8 = 30;
  const F8 = 31;
  const G8 = 32;
  const H8 = 33;
  
  const B88 = [26, 27, 28, 29, 30, 31, 32, 33,
               38, 39, 40, 41, 42, 43, 44, 45,
               50, 51, 52, 53, 54, 55, 56, 57,
               62, 63, 64, 65, 66, 67, 68, 69,
               74, 75, 76, 77, 78, 79, 80, 81,
               86, 87, 88, 89, 90, 91, 92, 93,
               98, 99, 100,101,102,103,104,105,
               110,111,112,113,114,115,116,117];
  
  const COORDS = ['??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', 'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', '??', '??',
                  '??', '??', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', '??', '??',
                  '??', '??', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', '??', '??',
                  '??', '??', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', '??', '??',
                  '??', '??', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', '??', '??',
                  '??', '??', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', '??', '??',
                  '??', '??', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', '??', '??',
                  '??', '??', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
                  '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??'];
  
  const RANK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
                0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0,
                0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
                0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
                0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
                0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
                0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const FILE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  
  const CENTRE = [0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 18, 10, 4, 0, 0,
                  0, 0, 4, 10, 18, 28, 28, 19, 10, 4, 0, 0,
                  0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                  0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                  0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                  0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0];
  
  const MAX_MOVES = 256;
  
  const ALL_MOVES        = 0;
  const NOISY_MOVES_ONLY = 1;
  
  const MOVE_TO_BITS     = 0;
  const MOVE_FR_BITS     = 8;
  const MOVE_TOOBJ_BITS  = 16;
  const MOVE_FROBJ_BITS  = 20;
  const MOVE_PROMAS_BITS = 29;
  
  const MOVE_TO_MASK       = 0x000000FF;
  const MOVE_FR_MASK       = 0x0000FF00;
  const MOVE_TOOBJ_MASK    = 0x000F0000;
  const MOVE_FROBJ_MASK    = 0x00F00000;
  const MOVE_KINGMOVE_MASK = 0x01000000;
  const MOVE_EPTAKE_MASK   = 0x02000000;
  const MOVE_EPMAKE_MASK   = 0x04000000;
  const MOVE_CASTLE_MASK   = 0x08000000;
  const MOVE_PROMOTE_MASK  = 0x10000000;
  const MOVE_PROMAS_MASK   = 0x60000000;  // NBRQ.
  const MOVE_LEGAL_MASK    = 0x80000000;
  
  const MOVE_EQ_MASK       = ~MOVE_LEGAL_MASK & 0xFFFFFFFF;
  const MOVE_CAPTURE_MASK  = MOVE_TOOBJ_MASK | MOVE_EPTAKE_MASK;
  const MOVE_IKKY_MASK     = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_EPMAKE_MASK;
  const MOVE_REPRESET_MASK = MOVE_TOOBJ_MASK | MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK;
  
  const MOVE_E1G1 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | G1;
  const MOVE_E1C1 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | C1;
  const MOVE_E8G8 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | G8;
  const MOVE_E8C8 = MOVE_KINGMOVE_MASK | MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | C8;
  
  const QPRO = (QUEEN-2)  << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const RPRO = (ROOK-2)   << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const BPRO = (BISHOP-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  const NPRO = (KNIGHT-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
  
  const WHITE_RIGHTS_KING  = 0x00000001;
  const WHITE_RIGHTS_QUEEN = 0x00000002;
  const BLACK_RIGHTS_KING  = 0x00000004;
  const BLACK_RIGHTS_QUEEN = 0x00000008;
  const WHITE_RIGHTS       = WHITE_RIGHTS_QUEEN | WHITE_RIGHTS_KING;
  const BLACK_RIGHTS       = BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING;
  
  const MASK_RIGHTS = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15];
  
  const W_OFFSET_ORTH  = -12;
  const W_OFFSET_DIAG1 = -13;
  const W_OFFSET_DIAG2 = -11;
  
  const B_OFFSET_ORTH  = 12;
  const B_OFFSET_DIAG1 = 13;
  const B_OFFSET_DIAG2 = 11;
  
  const KNIGHT_OFFSETS  = [25,-25,23,-23,14,-14,10,-10];
  const BISHOP_OFFSETS  = [11,-11,13,-13];
  const ROOK_OFFSETS    = [1,-1,12,-12];
  const QUEEN_OFFSETS   = [11,-11,13,-13,1,-1,12,-12];
  const KING_OFFSETS    = [11,-11,13,-13,1,-1,12,-12];
  
  const SLIDER_OFFSETS = [0, 0, 0, BISHOP_OFFSETS, ROOK_OFFSETS, QUEEN_OFFSETS];
  
  const WB_CAN_CAPTURE  = [IS_BPNBRQ,      IS_WPNBRQ];
  const WB_OUR_PIECE    = [IS_W,           IS_B];
  const WB_OFFSET_ORTH  = [W_OFFSET_ORTH,  B_OFFSET_ORTH];
  const WB_OFFSET_DIAG1 = [W_OFFSET_DIAG1, B_OFFSET_DIAG1];
  const WB_OFFSET_DIAG2 = [W_OFFSET_DIAG2, B_OFFSET_DIAG2];
  const WB_HOME_RANK    = [2,              7];
  const WB_PROMOTE_RANK = [7,              2];
  const WB_EP_RANK      = [5,              4];
  const WB_RQ           = [IS_WRQ,         IS_BRQ];
  const WB_BQ           = [IS_WBQ,         IS_BBQ];
  const WB_PAWN         = [W_PAWN,         B_PAWN];
  
  //{{{  ALIGNED
  
  const ALIGNED = [
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,12,0,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,0,12,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,0,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,11,0,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,0,-11,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,0,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-12,0,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,0,-12,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
    [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
  ];
  
  //}}}
  
  //}}}
  //{{{  weights
  
  const MATERIAL = [100,320,330,500,900,20000];
  
  const WPAWN_PST = [0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0,
                     0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0,
                     0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0,
                     0, 0, 50, 50, 50,  50,  50,  50,  50, 50, 0, 0,
                     0, 0, 10, 10, 20,  30,  30,  20,  10, 10, 0, 0,
                     0, 0, 5,  5,  10,  25,  25,  10,  5,  5,  0, 0,
                     0, 0, 0,  0,  0,   20,  20,  0,   0,  0,  0, 0,
                     0, 0, 5,  -5, -10, 0,   0,   -10, -5, 5,  0, 0,
                     0, 0, 5,  10, 10,  -20, -20, 10,  10, 5,  0, 0,
                     0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0,
                     0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0,
                     0, 0, 0,  0,  0,   0,   0,   0,   0,  0,  0, 0];
  
  const WKNIGHT_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, -50, -40, -30, -30, -30, -30, -40, -50, 0, 0,
                       0, 0, -40, -20, 0,   0,   0,   0,   -20, -40, 0, 0,
                       0, 0, -30, 0,   10,  15,  15,  10,   0,  -30, 0, 0,
                       0, 0, -30, 5,   15,  20,  20,  15,   5,  -30, 0, 0,
                       0, 0, -30, 0,   15,  20,  20,  15,   0,  -30, 0, 0,
                       0, 0, -30, 5,   10,  15,  15,  10,   5,  -30, 0, 0,
                       0, 0, -40, -20, 0,   5,   5,   0,   -20, -40, 0, 0,
                       0, 0, -50, -40, -30, -30, -30, -30, -40, -50, 0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0];
  
  const WBISHOP_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, -20, -10, -10, -10, -10, -10, -10, -20, 0, 0,
                       0, 0, -10, 0,   0,   0,   0,   0,    0,  -10, 0, 0,
                       0, 0, -10, 0,   5,   10,  10,  5,    0,  -10, 0, 0,
                       0, 0, -10, 5,   5,   10,  10,  5,    5,  -10, 0, 0,
                       0, 0, -10, 0,   10,  10,  10,  10,   0,  -10, 0, 0,
                       0, 0, -10, 10,  10,  10,  10,  10,   10, -10, 0, 0,
                       0, 0, -10, 5 ,   0,   0,   0,   0,   5,  -10, 0, 0,
                       0, 0, -20, -10, -10, -10, -10, -10, -10, -20, 0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                       0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0];
  
  const WROOK_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                     0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                     0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                     0, 0, 5,   10,  10,  10,  10,  10,  10,  5,  0, 0,
                     0, 0, -5,  0,   0,   0,   0,   0,   0,   -5, 0, 0,
                     0, 0, -5,  0,   0,   0,   0,   0,   0,   -5, 0, 0,
                     0, 0, -5,  0,   0,   0,   0,   0,   0,   -5, 0, 0,
                     0, 0, -5,  0,   0,   0,   0,   0,   0,   -5, 0, 0,
                     0, 0, -5,  0,   0,   0,   0,   0,   0,   -5, 0, 0,
                     0, 0, 0,   0,   0,   5,   5,   0,   0,   0,  0, 0,
                     0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                     0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0];
  
  const WQUEEN_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                      0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                      0, 0, -20, -10, -10, -5,  -5,  -10, -10, -20, 0, 0,
                      0, 0, -10, 0,   0,   0,   0,   0,    0,  -10, 0, 0,
                      0, 0, -10, 0,   5,   5,   5,   5,    0,  -10, 0, 0,
                      0, 0, -5,  0,   5,   5,   5,   5,    0,  -5,  0, 0,
                      0, 0,  0,  0,   5,   5,   5,   5,    0,  -5,  0, 0,
                      0, 0, -10, 5,   5,   5,   5,   5,    0,  -10, 0, 0,
                      0, 0, -10, 0,   5,   0,   0,   0,    0,  -10, 0, 0,
                      0, 0, -20, -10, -10, -5,  -5,  -10, -10, -20, 0, 0,
                      0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                      0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0];
  
  const WKING_MID_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                         0, 0, -30, -40, -40, -50, -50, -40, -40, -30, 0, 0,
                         0, 0, -30, -40, -40, -50, -50, -40, -40, -30, 0, 0,
                         0, 0, -30, -40, -40, -50, -50, -40, -40, -30, 0, 0,
                         0, 0, -30, -40, -40, -50, -50, -40, -40, -30, 0, 0,
                         0, 0, -20, -30, -30, -40, -40, -30, -30, -20, 0, 0,
                         0, 0, -10, -20, -20, -20, -20, -20, -20, -10, 0, 0,
                         0, 0, 20,  20,  0,   0,   0,   0,   20,  20,  0, 0,
                         0, 0, 20,  30,  10,  0,   0,   10,  30,  20,  0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0, 0];
  
  const WKING_END_PST = [0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                         0, 0, -50, -40, -30, -20, -20, -30, -40, -50,0, 0,
                         0, 0, -30, -20, -10, 0,   0,   -10, -20, -30,0, 0,
                         0, 0, -30, -10, 20,  30,  30,  20,  -10, -30,0, 0,
                         0, 0, -30, -10, 30,  40,  40,  30,  -10, -30,0, 0,
                         0, 0, -30, -10, 30,  40,  40,  30,  -10, -30,0, 0,
                         0, 0, -30, -10, 20,  30,  30,  20,  -10, -30,0, 0,
                         0, 0, -30, -30, 0,   0,   0,   0,   -30, -30,0, 0,
                         0, 0, -50, -30, -30, -30, -30, -30, -30, -50,0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0,
                         0, 0, 0,   0,   0,   0,   0,   0,   0,   0,  0, 0];
  
  const BPAWN_PST     = Array(144).fill(0);
  const BKNIGHT_PST   = Array(144).fill(0);
  const BBISHOP_PST   = Array(144).fill(0);
  const BROOK_PST     = Array(144).fill(0);
  const BQUEEN_PST    = Array(144).fill(0);
  const BKING_MID_PST = Array(144).fill(0);
  const BKING_END_PST = Array(144).fill(0);
  
  const WHITE_MID_PST = [WPAWN_PST, WKNIGHT_PST, WBISHOP_PST, WROOK_PST, WQUEEN_PST, WKING_MID_PST];
  const WHITE_END_PST = [WPAWN_PST, WKNIGHT_PST, WBISHOP_PST, WROOK_PST, WQUEEN_PST, WKING_END_PST];
  const BLACK_MID_PST = [BPAWN_PST, BKNIGHT_PST, BBISHOP_PST, BROOK_PST, BQUEEN_PST, BKING_MID_PST];
  const BLACK_END_PST = [BPAWN_PST, BKNIGHT_PST, BBISHOP_PST, BROOK_PST, BQUEEN_PST, BKING_END_PST];
  
  const WB_MID_PST = [WHITE_MID_PST, BLACK_MID_PST];
  const WB_END_PST = [WHITE_END_PST, BLACK_END_PST];
  
  //}}}

  //{{{  move primitives
  
  function moveEq (m1,m2) {
    return (m1 & MOVE_EQ_MASK) == (m2 & MOVE_EQ_MASK);
  }
  
  function moveFromSq (move) {
    return (move & MOVE_FR_MASK) >>> MOVE_FR_BITS;
  }
  
  function moveToSq (move) {
    return (move & MOVE_TO_MASK) >>> MOVE_TO_BITS;
  }
  
  function moveToObj (move) {
    return (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  }
  
  function moveFromObj (move) {
    return (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  }
  
  function movePromotePiece (move) {
    return ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;
  }
  
  function formatMove (move) {
  
    if (move == 0)
      return 'NULL MOVE';
  
    const fr = moveFromSq(move);
    const to = moveToSq(move);
  
    const frCoord = COORDS[fr];
    const toCoord = COORDS[to];
  
    const pro = (move & MOVE_PROMOTE_MASK) ? OBJ_CHAR[movePromotePiece(move)|BLACK] : '';
  
    return frCoord + toCoord + pro;
  }
  
  //}}}
  //{{{  board primitives
  
  function objColour (obj) {
    return obj & COLOUR_MASK;
  }
  
  function objPiece (obj) {
    return obj & PIECE_MASK;
  }
  
  function colourIndex (c) {
    return c >>> 3;
  }
  
  function colourIndexToggle (i) {
    return Math.abs(i-1);
  }
  
  function colourMultiplier (c) {
    return (-c >> 31) | 1;
  }
  
  function colourToggle (c) {
    return ~c & COLOUR_MASK;
  }
  
  function flip (sq) {
    let m = (143 - sq) / 12 | 0;
    return 12*m + sq%12;
  }
  
  //}}}

  //{{{  nodeStruct
  
  //{{{  struct
  
  function nodeStruct () {
  
    this.loz    = null;
    this.child  = null;
    this.parent = null;
  
    this.ply = 0;
  
    this.quietNum   = 0;
    this.quietMoves = Array(MAX_MOVES).fill(0);
    this.quietRanks = Array(MAX_MOVES).fill(0);
  
    this.noisyNum   = 0;
    this.noisyMoves = Array(MAX_MOVES).fill(0);
    this.noisyRanks = Array(MAX_MOVES).fill(0);
  
    this.nextMove = 0;
    this.stage    = 0;
    this.flags    = 0;
    this.inCheck  = 0;
  
    this.ttMove = 0;
    this.ttNum  = 0;
  
    this.hHistoryLimit = 0;
    this.rights        = 0;
    this.ep            = 0;
    this.hLo           = new Uint32Array(1);
    this.hHi           = new Uint32Array(1);
  }
  
  //}}}
  
  //{{{  initMoveGen
  
  nodeStruct.prototype.initMoveGen = function (flags, inCheck) {
  
    this.stage     = 0;
    this.flags     = flags;
    this.inCheck   = inCheck;
  
  }
  
  //}}}
  
  //{{{  getNextMove
  
  nodeStruct.prototype.getNextMove = function () {
  
    const l = this.loz;
  
    switch (this.stage) {
  
      case 0:
  
        this.noisyNum = 0;
        this.quietNum = 0;
        this.ttNum    = 0;
  
        this.genMoves();
  
        //{{{  gen castling moves
        
        //hack we can defer this until the quiet loop but its needed
        //to validate the tt move at the moment
        
        if (!this.inCheck && l.rights) {
        
          if (l.turn == WHITE)
            this.genWhiteCastlingMoves();
          else
            this.genBlackCastlingMoves();
        
        }
        
        //}}}
  
        this.nextMove = 0;
        this.stage++;
  
      case 1:
  
        this.stage++;
        if (this.ttNum)
          return this.ttMove;
  
      case 2:
  
        if (this.ttMove && !this.ttNum) {
          console.log(l.fen(),formatMove(this.ttMove));
        }
  
        if (this.nextMove < this.noisyNum)
          return this.nextStagedNoisy();
  
        if (this.flags & NOISY_MOVES_ONLY)
          return 0;
  
        this.rankQuiets();
  
        this.nextMove = 0;
        this.stage++;
  
      case 3:
  
        if (this.nextMove < this.quietNum)
          return this.nextStagedQuiet();
  
        return 0;
    }
  }
  
  //}}}
  //{{{  nextStagedNoisy
  
  nodeStruct.prototype.nextStagedNoisy = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.noisyNum; i++) {
      if (this.noisyRanks[i] > maxR) {
        maxR = this.noisyRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.noisyMoves[maxI]
  
    this.noisyMoves[maxI] = this.noisyMoves[this.nextMove];
    this.noisyRanks[maxI] = this.noisyRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  //{{{  nextStagedQuiet
  
  nodeStruct.prototype.nextStagedQuiet = function () {
  
    let maxR = -100000;
    let maxI = 0;
  
    for (let i=this.nextMove; i < this.quietNum; i++) {
      if (this.quietRanks[i] > maxR) {
        maxR = this.quietRanks[i];
        maxI = i;
      }
    }
  
    const maxM = this.quietMoves[maxI]
  
    this.quietMoves[maxI] = this.quietMoves[this.nextMove];
    this.quietRanks[maxI] = this.quietRanks[this.nextMove];
  
    this.nextMove++;
  
    return maxM;
  }
  
  //}}}
  
  //{{{  genMoves
  
  nodeStruct.prototype.genMoves = function () {
  
    const l = this.loz;
    const b = l.board;
  
    const cx           = colourIndex(l.turn);
    const OUR_PIECE    = WB_OUR_PIECE[cx];
    const HOME_RANK    = WB_HOME_RANK[cx];
    const PROMOTE_RANK = WB_PROMOTE_RANK[cx];
    const EP_RANK      = WB_EP_RANK[cx];
    const aligned      = ALIGNED[l.kings[cx]];
  
    for (let i=0; i<64; i++) {
  
      const fr    = B88[i];
      const frObj = b[fr];
  
      if (!OUR_PIECE[frObj])
        continue;
  
      const frPiece   = objPiece(frObj);
      const frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
      const legalMask = !this.inCheck && !aligned[fr] ? MOVE_LEGAL_MASK : 0;
  
      switch (frPiece) {
  
        case KING:
          this.genKingMoves(frMove);
          break;
  
        case PAWN:
          const frRank = RANK[fr];
          switch (frRank) {
            case HOME_RANK:
              this.genHomePawnMoves(frMove | legalMask);
              break;
            case PROMOTE_RANK:
              this.genPromotePawnMoves(frMove | legalMask);
              break;
            case EP_RANK:
              this.genPawnMoves(frMove | legalMask);
              if (l.ep)
                this.genEnPassPawnMoves(frMove);
              break;
            default:
              this.genPawnMoves(frMove | legalMask);
              break;
          }
          break;
  
        case KNIGHT:
          this.genKnightMoves(frMove | legalMask);
          break;
  
        default:
          this.genSliderMoves(frMove | legalMask);
          break;
      }
    }
  }
  
  //}}}
  
  //{{{  addNoisy
  
  //              E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K
  const MVVLVA = [1, 1, 2, 3, 4, 5, 6, 0, 0, 1, 2, 3, 4, 5, 6];
  
  nodeStruct.prototype.addNoisy = function (move) {
  
    if (moveEq(this.ttMove,move)) {
      this.ttNum++;
    }
    else {
      this.noisyMoves[this.noisyNum]   = move;
      this.noisyRanks[this.noisyNum++] = 10 * MVVLVA[moveToObj(move)] - MVVLVA[moveFromObj(move)];
    }
  }
  
  //}}}
  //{{{  addQuiet
  
  nodeStruct.prototype.addQuiet = function (move) {
  
    if (moveEq(this.ttMove,move))
      this.ttNum++;
    else
      this.quietMoves[this.quietNum++] = move;
  
  }
  
  //}}}
  //{{{  rankQuiets
  
  nodeStruct.prototype.rankQuiets = function () {
  
    const l = this.loz;
  
    for (let i=0; i < this.quietNum; i++) {
  
      const move    = this.quietMoves[i];
      const fr      = moveFromSq(move);
      const to      = moveToSq(move);
      const frObj   = moveFromObj(move);
      const frPiece = objPiece(frObj) - 1;
      const cx      = colourIndex(l.turn);
      const pst     = WB_MID_PST[cx][frPiece];
      const val     = pst[to] - pst[fr];
  
      this.quietRanks[i] = 1000 + val;
    }
  }
  
  //}}}
  
  //{{{  genWhiteCastlingMoves
  
  nodeStruct.prototype.genWhiteCastlingMoves = function () {
  
    const l = this.loz;
    const b = l.board;
  
    if ((l.rights & WHITE_RIGHTS_KING) && !b[F1]
                                       && !b[G1]
                                       && b[G2] != B_KING
                                       && b[H2] != B_KING
                                       && !l.isKingAttacked(F1,BLACK)) {
      this.addQuiet(MOVE_E1G1);
    }
  
    if ((l.rights & WHITE_RIGHTS_QUEEN) && !b[B1]
                                        && !b[C1]
                                        && !b[D1]
                                        && b[B2] != B_KING
                                        && b[C2] != B_KING
                                        && !l.isKingAttacked(D1,BLACK)) {
      this.addQuiet(MOVE_E1C1);
    }
  }
  
  //}}}
  //{{{  genBlackCastlingMoves
  
  nodeStruct.prototype.genBlackCastlingMoves = function () {
  
    const l = this.loz;
    const b = l.board;
  
    if ((l.rights & BLACK_RIGHTS_KING) && b[F8] == 0
                                       && b[G8] == 0
                                       && b[G7] != W_KING
                                       && b[H7] != W_KING
                                       && !l.isKingAttacked(F8,WHITE)) {
      this.addQuiet(MOVE_E8G8);
    }
  
    if ((l.rights & BLACK_RIGHTS_QUEEN) && b[B8] == 0
                                        && b[C8] == 0
                                        && b[D8] == 0
                                        && b[B7] != W_KING
                                        && b[C7] != W_KING
                                        && !l.isKingAttacked(D8,WHITE)) {
      this.addQuiet(MOVE_E8C8);
    }
  }
  
  //}}}
  
  //{{{  genPawnMoves
  
  nodeStruct.prototype.genPawnMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to])
      this.addQuiet(frMove | to);
  
    to = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genEnPassPawnMoves
  
  nodeStruct.prototype.genEnPassPawnMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to = 0;
  
    to = fr + OFFSET_DIAG1;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  
    to = fr + OFFSET_DIAG2;
    if (to == l.ep && !b[to])
      this.addNoisy(frMove | to | MOVE_EPTAKE_MASK);
  }
  
  //}}}
  //{{{  genHomePawnMoves
  
  nodeStruct.prototype.genHomePawnMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to);
      to += OFFSET_ORTH;
      if (!b[to])
        this.addQuiet(frMove | to | MOVE_EPMAKE_MASK);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj])
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
  }
  
  //}}}
  //{{{  genPromotePawnMoves
  
  nodeStruct.prototype.genPromotePawnMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr           = moveFromSq(frMove);
    const cx           = colourIndex(l.turn);
    const CAN_CAPTURE  = WB_CAN_CAPTURE[cx];
    const OFFSET_ORTH  = WB_OFFSET_ORTH[cx];
    const OFFSET_DIAG1 = WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = WB_OFFSET_DIAG2[cx];
  
    let to    = 0;
    let toObj = 0;
  
    to = fr + OFFSET_ORTH;
    if (!b[to]) {
      this.addQuiet(frMove | to | QPRO);
      this.addQuiet(frMove | to | RPRO);
      this.addQuiet(frMove | to | BPRO);
      this.addQuiet(frMove | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG1;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  
    to    = fr + OFFSET_DIAG2;
    toObj = b[to];
    if (CAN_CAPTURE[toObj]) {
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | QPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | RPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | BPRO);
      this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | NPRO);
    }
  }
  
  //}}}
  
  //{{{  genKingMoves
  
  nodeStruct.prototype.genKingMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const cy          = colourIndexToggle(cx);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const theirKingSq = l.kings[cy];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to = fr + KING_OFFSETS[dir++];
  
      if (!ADJACENT[Math.abs(to-theirKingSq)]) {
  
        const toObj = b[to];
  
        if (!toObj)
          this.addQuiet(frMove | to | MOVE_KINGMOVE_MASK);
  
        else if (CAN_CAPTURE[toObj])
          this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to | MOVE_KINGMOVE_MASK);
      }
    }
  }
  
  //}}}
  //{{{  genKnightMoves
  
  nodeStruct.prototype.genKnightMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
  
    let dir = 0;
  
    while (dir < 8) {
  
      const to    = fr + KNIGHT_OFFSETS[dir++];
      const toObj = b[to];
  
      if (!toObj)
        this.addQuiet(frMove | to);
  
      else if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  //{{{  genSliderMoves
  
  nodeStruct.prototype.genSliderMoves = function (frMove) {
  
    const l = this.loz;
    const b = l.board;
  
    const fr          = moveFromSq(frMove);
    const frObj       = moveFromObj(frMove);
    const frPiece     = objPiece(frObj);
    const cx          = colourIndex(l.turn);
    const CAN_CAPTURE = WB_CAN_CAPTURE[cx];
    const OFFSETS     = SLIDER_OFFSETS[frPiece];
    const len         = OFFSETS.length;
  
    let dir = 0;
  
    while (dir < len) {
  
      const offset = OFFSETS[dir++];
  
      let to = fr + offset;
      while (!b[to]) {
        this.addQuiet(frMove | to);
        to += offset;
      }
  
      const toObj = b[to];
      if (CAN_CAPTURE[toObj])
        this.addNoisy(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
    }
  }
  
  //}}}
  
  //{{{  cacheSave
  
  nodeStruct.prototype.cacheSave = function () {
  
    const l = this.loz;
  
    this.hHistoryLimit = l.hHistoryLimit;
    this.rights        = l.rights;
    this.ep            = l.ep;
    this.hLo[0]        = l.hLo[0];
    this.hHi[0]        = l.hHi[0];
  }
  
  //}}}
  //{{{  cacheUnSave
  
  nodeStruct.prototype.cacheUnsave = function () {
  
    const l = this.loz;
  
    l.hHistoryLimit = this.hHistoryLimit;
    l.rights        = this.rights;
    l.ep            = this.ep;
    l.hLo[0]        = this.hLo[0];
    l.hHi[0]        = this.hHi[0];
  }
  
  //}}}
  
  //}}}
  //{{{  lozStruct
  
  //{{{  struct
  
  function lozStruct () {
  
    this.board  = Array(144).fill(0);
    this.rights = 0;
    this.ep     = 0;
    this.turn   = 0;
    this.kings  = [0,0];
  
    this.bestMove    = 0;
    this.outOfTime   = 0;
    this.nodeCount   = 0;
    this.targetDepth = 0;
    this.targetNodes = 0;
    this.finishTime  = 0;
  
    this.nodes = Array(MAX_PLY).fill(null);
  
    this.hLo = new Uint32Array(1);
    this.hHi = new Uint32Array(1);
  
    this.hHistoryLo = new Uint32Array(MAX_PLY * 8);
    this.hHistoryHi = new Uint32Array(MAX_PLY * 8);
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    this.hLoTurn   = new Uint32Array(9);
    this.hHiTurn   = new Uint32Array(9);
    this.hLoRights = new Uint32Array(16);
    this.hHiRights = new Uint32Array(16);
    this.hLoEP     = new Uint32Array(144);
    this.hHiEP     = new Uint32Array(144);
    this.hLoObj    = Array(16).fill(null);
    this.hHiObj    = Array(16).fill(null);
  
    this.ttLo    = new Uint32Array(TT_SIZE);
    this.ttHi    = new Uint32Array(TT_SIZE);
    this.ttFlags = new Uint8Array(TT_SIZE);
    this.ttScore = new Int16Array(TT_SIZE);
    this.ttDepth = new Uint8Array(TT_SIZE);
    this.ttMove  = new Uint32Array(TT_SIZE);
  
  }
  
  //}}}
  
  //{{{  initOnce
  
  lozStruct.prototype.initOnce = function () {
  
    //{{{  nodes
    
    for (let i=0; i < MAX_PLY; i++) {
      this.nodes[i]     = new(nodeStruct);
      this.nodes[i].loz = this;
      this.nodes[i].ply = i + 1;
    }
    
    for (let i=0; i < MAX_PLY-1; i++) {
      this.nodes[i].child = this.nodes[i+1];
    }
    
    for (let i=1; i < MAX_PLY; i++) {
      this.nodes[i].parent = this.nodes[i-1];
    }
    
    //}}}
    //{{{  hash
    
    for (let i=0; i < this.hLoTurn.length; i++) {
      this.hLoTurn[i] = twisterRand();
      this.hHiTurn[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoRights.length; i++) {
      this.hLoRights[i] = twisterRand();
      this.hHiRights[i] = twisterRand();
    }
    
    for (let i=0; i < this.hLoEP.length; i++) {
      this.hLoEP[i] = twisterRand();
      this.hHiEP[i] = twisterRand();
    }
    
    for (let i=1; i < this.hLoObj.length; i++) {
      this.hLoObj[i] = new Uint32Array(144);
      this.hHiObj[i] = new Uint32Array(144);
      for (let j=0; j < 144; j++) {
        this.hLoObj[i][j] = twisterRand();
        this.hHiObj[i][j] = twisterRand();
      }
    }
    this.hLoObj[0] = new Uint32Array(144);
    this.hHiObj[0] = new Uint32Array(144);
    for (let j=0; j < 144; j++) {
      this.hLoObj[0][j] = 0;
      this.hHiObj[0][j] = 0;
    }
    
    //}}}
    //{{{  weights
    
    for (let i=0; i < 144; i++) {
    
      let j = flip(i);
    
      BPAWN_PST[j]     = WPAWN_PST[i];
      BKNIGHT_PST[j]   = WKNIGHT_PST[i];
      BBISHOP_PST[j]   = WBISHOP_PST[i];
      BROOK_PST[j]     = WROOK_PST[i];
      BQUEEN_PST[j]    = WQUEEN_PST[i];
      BKING_MID_PST[j] = WKING_MID_PST[i];
      BKING_END_PST[j] = WKING_END_PST[i];
    }
    
    //}}}
  
  }
  
  //}}}
  
  //{{{  uciExec
  
  lozStruct.prototype.uciExec = function (e) {
  
    const messageList = e.split('\n');
  
    for (let messageNum=0; messageNum < messageList.length; messageNum++ ) {
  
      let message = messageList[messageNum].replace(/(\r\n|\n|\r)/gm,"");
  
      message = message.trim();
      message = message.replace(/\s+/g,' ');
  
      const tokens  = message.split(' ');
      const command = tokens[0];
  
      if (!command)
        continue;
  
      switch (command) {
  
        case 'go':
        case 'g': {
          //{{{  go
          
          const slop = 1;
          
          let wTime     = 0;
          let bTime     = 0;
          let wInc      = 0;
          let bInc      = 0;
          let moveTime  = 0;
          let movesToGo = 0;
          let depth     = 0;
          let nodes     = 0;
          
          let i = 1;
          
          while (i < tokens.length) {
            switch (tokens[i]) {
              case 'depth':
              case 'd': {
                depth = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'nodes': {
                nodes = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movestogo': {
                movesToGo = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'movetime':
              case 'mt': {
                moveTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'winc': {
                wInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'binc': {
                bInc = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'wtime': {
                wTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              case 'btime': {
                bTime = parseInt(tokens[i+1]);
                i += 2;
                break;
              }
              default: {
                console.log('unknown go token', tokens[i]);
                i++;
              }
            }
          }
          
          if (depth)
            this.targetDepth = depth;
          else
            this.targetDepth = MAX_PLY - 1;
          
          if (nodes)
            this.targetNodes = nodes;
          else
            this.targetNodes = 0;
          
          if (moveTime > 0)
            this.finishTime = Date.now() + moveTime + slop;
          
          else {
          
            if (movesToGo)
              movesToGo += 2;
            else
              movesToGo = 30;
          
            if (wTime && this.turn == WHITE)
              this.finishTime = Date.now() + 0.95 * (wTime/movesToGo + wInc) + slop;
            else if (bTime && this.turn == BLACK)
              this.finishTime = Date.now() + 0.95 * (bTime/movesToGo + bInc) + slop;
            else
              this.finishTime = 0;
          }
          
          this.go();
          
          break;
          
          //}}}
        }
  
        case 'stop': {
          //{{{  stop
          
          break;
          
          //}}}
        }
  
        case 'uci': {
          //{{{  uci
          
          console.log('id name lozza 2.6');
          console.log('id author Colin Jenkins');
          console.log('uciok');
          
          break;
          
          //}}}
        }
  
        case 'ucinewgame':
        case 'u': {
          //{{{  ucinewgame
          
          this.newGame();
          
          break;
          
          //}}}
        }
  
        case 'isready': {
          //{{{  isready
          
          console.log('readyok');
          
          break;
          
          //}}}
        }
  
        case 'position':
        case 'p': {
          //{{{  position
          
          switch (tokens[1]) {
          
            case 'startpos':
            case 's':
          
              this.position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR', 'w', 'KQkq', '-');
              if (tokens[2] == 'moves') {
                for (let i=3; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            case 'fen':
            case 'f':
          
              this.position(tokens[2], tokens[3], tokens[4], tokens[5]);
              if (tokens[8] == 'moves') {
                for (let i=9; i < tokens.length; i++)
                  this.playMove(tokens[i]);
              }
              break;
          
            default:
          
              console.log(command, tokens[1], 'not implemented');
              break;
          }
          
          break;
          
          //}}}
        }
  
        case 'board':
        case 'b': {
          //{{{  board
          
          this.printBoard();
          
          break;
          
          //}}}
        }
  
        case 'draw':
        case 'd': {
          //{{{  draw
          
          console.log(this.isDraw());
          
          break;
          
          //}}}
        }
  
        case 'eval':
        case 'e': {
          //{{{  eval
          
          const e = this.evaluate();
          
          console.log(e);
          
          break;
          
          //}}}
        }
  
        case 'quit':
        case 'q': {
          //{{{  quit
          
          process.exit();
          
          break;
          
          //}}}
        }
  
        case 'perft': {
          //{{{  perft
          
          const depth  = parseInt(tokens[1]);
          const t      = Date.now();
          const pmoves = perft(depth);
          
          console.log(pmoves,'moves',Date.now()-t,'ms');
          
          break;
          
          //}}}
        }
  
        case 'bench': {
          //{{{  bench
          
          //{{{  bench fens
          
          const bFens = [
            "r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
            "4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
            "r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
            "6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
            "8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
            "7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
            "r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
            "3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
            "2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
            "4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
            "2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
            "1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
            "r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
            "8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
            "1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
            "8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
            "3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
            "5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
            "1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
            "q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
            "r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
            "r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
            "r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
            "r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
            "r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
            "r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
            "r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
            "3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
            "5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
            "8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
            "8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
            "8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
            "8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
            "8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
            "8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
            "8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
            "8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
            "8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
            "1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
            "4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
            "r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
            "2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
            "6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
            "2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
            "r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
            "6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
            "rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
            "2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
            "3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
            "2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
          ];
          
          //}}}
          
          let nodes = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < bFens.length; i++) {
          
            const fen = bFens[i];
          
            this.uciExec('ucinewgame');
            this.uciExec('position fen ' + fen);
            this.uciExec('go depth 6');
          
            nodes += this.nodeCount;
          }
          
          const t2  = Date.now();
          const sec = (Math.round((t2-t1)/100)/10);
          
          console.log(sec,nodes);
          
          break;
          
          //}}}
        }
  
        case 'pt': {
          //{{{  perft tests
          
          //{{{  perft fens
          
          const pFens = [
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 2, 400,       'cpw-pos1-2'],
            ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w Q    -  0 1', 3, 4729,      'castling-2'],
            ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w K    -  0 1', 3, 4686,      'castling-3'],
            ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w -    -  0 1', 3, 4522,      'castling-4'],
            ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b kq   -  0 1', 3, 4893,      'castling-5'],
            ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b q    -  0 1', 3, 4729,      'castling-6'],
            ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b k    -  0 1', 3, 4686,      'castling-7'],
            ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b -    -  0 1', 3, 4522,      'castling-8'],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 0, 1,         'cpw-pos1-0'],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 1, 20,        'cpw-pos1-1'],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 3, 8902,      'cpw-pos1-3'],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 4, 197281,    'cpw-pos1-4'],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 5, 4865609,   'cpw-pos1-5'],
            ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 1, 42,        'cpw-pos5-1'],
            ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 2, 1352,      'cpw-pos5-2'],
            ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 3, 53392,     'cpw-pos5-3'],
            ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 1, 48,        'cpw-pos2-1'],
            ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 2, 2039,      'cpw-pos2-2'],
            ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 3, 97862,     'cpw-pos2-3'],
            ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 5, 674624,    'cpw-pos3-5'],
            ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 1, 24,        'prom-1    '],
            ['fen 8/5bk1/8/2Pp4/8/1K6/8/8                                 w -    d6 0 1', 6, 824064,    'ccc-1     '],
            ['fen 8/8/1k6/8/2pP4/8/5BK1/8                                 b -    d3 0 1', 6, 824064,    'ccc-2     '],
            ['fen 8/8/1k6/2b5/2pP4/8/5K2/8                                b -    d3 0 1', 6, 1440467,   'ccc-3     '],
            ['fen 8/5k2/8/2Pp4/2B5/1K6/8/8                                w -    d6 0 1', 6, 1440467,   'ccc-4     '],
            ['fen 5k2/8/8/8/8/8/8/4K2R                                    w K    -  0 1', 6, 661072,    'ccc-5     '],
            ['fen 4k2r/8/8/8/8/8/8/5K2                                    b k    -  0 1', 6, 661072,    'ccc-6     '],
            ['fen 3k4/8/8/8/8/8/8/R3K3                                    w Q    -  0 1', 6, 803711,    'ccc-7     '],
            ['fen r3k3/8/8/8/8/8/8/3K4                                    b q    -  0 1', 6, 803711,    'ccc-8     '],
            ['fen r3k2r/1b4bq/8/8/8/8/7B/R3K2R                            w KQkq -  0 1', 4, 1274206,   'ccc-9     '],
            ['fen r3k2r/7b/8/8/8/8/1B4BQ/R3K2R                            b KQkq -  0 1', 4, 1274206,   'ccc-10    '],
            ['fen r3k2r/8/3Q4/8/8/5q2/8/R3K2R                             b KQkq -  0 1', 4, 1720476,   'ccc-11    '],
            ['fen r3k2r/8/5Q2/8/8/3q4/8/R3K2R                             w KQkq -  0 1', 4, 1720476,   'ccc-12    '],
            ['fen 2K2r2/4P3/8/8/8/8/8/3k4                                 w -    -  0 1', 6, 3821001,   'ccc-13    '],
            ['fen 3K4/8/8/8/8/8/4p3/2k2R2                                 b -    -  0 1', 6, 3821001,   'ccc-14    '],
            ['fen 8/8/1P2K3/8/2n5/1q6/8/5k2                               b -    -  0 1', 5, 1004658,   'ccc-15    '],
            ['fen 5K2/8/1Q6/2N5/8/1p2k3/8/8                               w -    -  0 1', 5, 1004658,   'ccc-16    '],
            ['fen 4k3/1P6/8/8/8/8/K7/8                                    w -    -  0 1', 6, 217342,    'ccc-17    '],
            ['fen 8/k7/8/8/8/8/1p6/4K3                                    b -    -  0 1', 6, 217342,    'ccc-18    '],
            ['fen 8/P1k5/K7/8/8/8/8/8                                     w -    -  0 1', 6, 92683,     'ccc-19    '],
            ['fen 8/8/8/8/8/k7/p1K5/8                                     b -    -  0 1', 6, 92683,     'ccc-20    '],
            ['fen K1k5/8/P7/8/8/8/8/8                                     w -    -  0 1', 6, 2217,      'ccc-21    '],
            ['fen 8/8/8/8/8/p7/8/k1K5                                     b -    -  0 1', 6, 2217,      'ccc-22    '],
            ['fen 8/k1P5/8/1K6/8/8/8/8                                    w -    -  0 1', 7, 567584,    'ccc-23    '],
            ['fen 8/8/8/8/1k6/8/K1p5/8                                    b -    -  0 1', 7, 567584,    'ccc-24    '],
            ['fen 8/8/2k5/5q2/5n2/8/5K2/8                                 b -    -  0 1', 4, 23527,     'ccc-25    '],
            ['fen 8/5k2/8/5N2/5Q2/2K5/8/8                                 w -    -  0 1', 4, 23527,     'ccc-26    '],
            ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 6, 119060324, 'cpw-pos1-6'],
            ['fen 8/p7/8/1P6/K1k3p1/6P1/7P/8                              w -    -  0 1', 8, 8103790,   'jvm-7     '],
            ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 6, 71179139,  'jvm-8     '],
            ['fen r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R                     w KQkq -  0 1', 6, 77054993,  'jvm-9     '],
            ['fen 8/5p2/8/2k3P1/p3K3/8/1P6/8                              b -    -  0 1', 8, 64451405,  'jvm-11    '],
            ['fen r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R         w KQkq -  0 1', 5, 29179893,  'jvm-12    '],
            ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 7, 178633661, 'jvm-10    '],
            ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 5, 193690690, 'jvm-6     '],
            ['fen 8/2pkp3/8/RP3P1Q/6B1/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 181153194, 'ob1       '],
            ['fen rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR         w KQkq f6 0 1', 6, 244063299, 'jvm-5     '],
            ['fen 8/2ppp3/8/RP1k1P1Q/8/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 205552081, 'ob2       '],
            ['fen 8/8/3q4/4r3/1b3n2/8/3PPP2/2k1K2R                        w K    -  0 1', 6, 207139531, 'ob3       '],
            ['fen 4r2r/RP1kP1P1/3P1P2/8/8/3ppp2/1p4p1/4K2R                b K    -  0 1', 6, 314516438, 'ob4       '],
            ['fen r3k2r/8/8/8/3pPp2/8/8/R3K1RR                            b KQkq e3 0 1', 6, 485647607, 'jvm-1     '],
            ['fen 8/3K4/2p5/p2b2r1/5k2/8/8/1q6                            b -    -  0 1', 7, 493407574, 'jvm-4     '],
            ['fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1   w kq   -  0 1', 6, 706045033, 'jvm-2     '],
            ['fen r6r/1P4P1/2kPPP2/8/8/3ppp2/1p4p1/R3K2R                  w KQ   -  0 1', 6, 975944981, 'ob5       ']
          ];
          
          //}}}
          
          let num = 0;
          
          if (tokens.length > 1)
            num = parseInt(tokens[1]);
          else
            num = pFens.length;
          
          let errs = 0;
          
          const t1 = Date.now();
          
          for (let i=0; i < num; i++) {
          
            const p = pFens[i];
          
            const fen   = p[0];
            const depth = p[1];
            const moves = p[2];
            const id    = p[3];
          
            this.uciExec('ucinewgame');
            this.uciExec('position ' + fen);
          
            const pmoves = this.perft(this.nodes[0], depth);
            const err    = pmoves - moves;
          
            errs += err;
          
            const t2  = Date.now();
            const sec = (''+Math.round((t2-t1)/100)/10).padEnd(6);
          
            console.log(sec,id,fen,depth,moves,pmoves,err,errs);
          }
          
          const t2  = Date.now();
          const sec = Math.round((t2-t1)/100)/10;
          
          console.log(sec, 'sec', errs, 'perft errors');
          
          break;
          
          //}}}
        }
  
        default:
          //{{{  ?
          
          console.log(command, '?');
          
          break;
          
          //}}}
      }
    }
  }
  
  //}}}
  //{{{  uciArgv
  
  lozStruct.prototype.uciArgv = function () {
  
    if (process.argv.length > 2) {
      for (let i=2; i < process.argv.length; i++)
        this.uciExec(process.argv[i]);
    }
  
  }
  
  //}}}
  
  //{{{  areWeOutOfTime
  
  lozStruct.prototype.areWeOutOfTime = function () {
  
    return this.bestMove && ((this.finishTime  && (Date.now()     >  this.finishTime)) ||
                             (this.targetNodes && (this.nodeCount >= this.targetNodes)));
  
  }
  
  //}}}
  
  //{{{  position
  
  lozStruct.prototype.position = function (sb, st, sr, sep) {
  
    const b = this.board;
  
    b.fill(EDGE);
  
    for (let i=0; i < 64; i++)
      b[B88[i]] = 0;
  
    //{{{  board board
    
    let sq   = 0;
    let rank = 7;
    let file = 0;
    
    for (let i=0; i < sb.length; i++) {
    
      const ch   = sb.charAt(i);
      const sq88 = (7-rank) * 8 + file;
      const sq   = B88[sq88];
    
      switch (ch) {
        //{{{  1-8
        
        case '1':
          file += 1;
          break;
        case '2':
          file += 2;
          break;
        case '3':
          file += 3;
          break;
        case '4':
          file += 4;
          break;
        case '5':
          file += 5;
          break;
        case '6':
          file += 6;
          break;
        case '7':
          file += 7;
          break;
        case '8':
          break;
        
        //}}}
        //{{{  /
        
        case '/':
          rank--;
          file = 0;
          break;
        
        //}}}
        //{{{  black
        
        case 'p':
          b[sq] = B_PAWN;
          file++;
          break;
        case 'n':
          b[sq] = B_KNIGHT;
          file++;
          break;
        case 'b':
          b[sq] = B_BISHOP;
          file++;
          break;
        case 'r':
          b[sq] = B_ROOK;
          file++;
          break;
        case 'q':
          b[sq] = B_QUEEN;
          file++;
          break;
        case 'k':
          b[sq] = B_KING;
          this.kings[1] = sq;
          file++;
          break;
        
        //}}}
        //{{{  white
        
        case 'P':
          b[sq] = W_PAWN;
          file++;
          break;
        case 'N':
          b[sq] = W_KNIGHT;
          file++;
          break;
        case 'B':
          b[sq] = W_BISHOP;
          file++;
          break;
        case 'R':
          b[sq] = W_ROOK;
          file++;
          break;
        case 'Q':
          b[sq] = W_QUEEN;
          file++;
          break;
        case 'K':
          b[sq] = W_KING;
          this.kings[0] = sq;
          file++;
          break;
        
        //}}}
        default:
          console.log('unknown board char','|'+ch+'|');
      }
    }
    
    //}}}
    //{{{  board turn
    
    if (st == 'w')
      this.turn = WHITE;
    
    else if (st == 'b')
      this.turn = BLACK;
    
    else
      console.log('unknown board colour', st)
    
    //}}}
    //{{{  board rights
    
    this.rights = 0;
    
    for (let i=0; i < sr.length; i++) {
    
      const ch = sr.charAt(i);
    
      if (ch == 'K') this.rights |= WHITE_RIGHTS_KING;
      if (ch == 'Q') this.rights |= WHITE_RIGHTS_QUEEN;
      if (ch == 'k') this.rights |= BLACK_RIGHTS_KING;
      if (ch == 'q') this.rights |= BLACK_RIGHTS_QUEEN;
    }
    
    //}}}
    //{{{  board ep
    
    if (sep.length == 2)
      this.ep = COORDS.indexOf(sep)
    
    else
      this.ep = 0;
    
    //}}}
  
    this.hashCalc()
  
  }
  
  //}}}
  //{{{  printBoard
  
  lozStruct.prototype.printBoard = function () {
  
    const b = this.board;
  
    for (let rank=7; rank >= 0; rank--) {
      process.stdout.write((rank+1)+' ');
      for (let file=0; file <= 7; file++) {
        process.stdout.write(OBJ_CHAR[b[B88[(7-rank)*8+file]]] + ' ');
      }
      process.stdout.write('\r\n');
    }
  
    console.log('  a b c d e f g h');
  
    if (this.turn == WHITE)
      process.stdout.write('w');
    else
      process.stdout.write('b');
    process.stdout.write(' ');
  
    if (this.rights) {
      if (this.rights & WHITE_RIGHTS_KING)
        process.stdout.write('K');
     if (this.rights & WHITE_RIGHTS_QUEEN)
        process.stdout.write('Q');
     if (this.rights & BLACK_RIGHTS_KING)
        process.stdout.write('k');
     if (this.rights & BLACK_RIGHTS_QUEEN)
        process.stdout.write('q');
      process.stdout.write(' ');
    }
    else
      process.stdout.write('- ');
  
    if (this.ep)
      process.stdout.write(COORDS[this.ep]);
    else
      process.stdout.write('-');
  
    console.log();
  
    console.log(this.hHi[0],this.hLo[0]);
  }
  
  //}}}
  //{{{  fen
  
  lozStruct.prototype.fen = function () {
  
    let fen = '';
    let n   = 0;
  
    for (let i=0; i < 8; i++) {
      for (let j=0; j < 8; j++) {
        const sq  = B88[i*8 + j]
        const obj = this.board[sq];
        if (obj == 0)
          n++;
        else {
          if (n) {
            fen += '' + n;
            n = 0;
          }
          fen += OBJ_CHAR[obj];
        }
      }
      if (n) {
        fen += '' + n;
        n = 0;
      }
      if (i < 7)
        fen += '/';
    }
  
    if (this.turn == WHITE)
      fen += ' w';
    else
      fen += ' b';
  
    if (this.rights) {
      fen += ' ';
      if (this.rights & WHITE_RIGHTS_KING)
        fen += 'K';
      if (this.rights & WHITE_RIGHTS_QUEEN)
        fen += 'Q';
      if (this.rights & BLACK_RIGHTS_KING)
        fen += 'k';
      if (this.rights & BLACK_RIGHTS_QUEEN)
        fen += 'Q';
    }
    else
      fen += ' -';
  
    if (this.ep)
      fen += ' ' + COORDS[this.ep];
    else
      fen += ' -';
  
    fen += ' 0 1';
  
    return fen;
  }
  
  //}}}
  //{{{  isKingAttacked
  
  lozStruct.prototype.isKingAttacked = function (to, byCol) {
  
    const b = this.board;
  
    const cx = colourIndex(byCol);
  
    const OFFSET_DIAG1 = -WB_OFFSET_DIAG1[cx];
    const OFFSET_DIAG2 = -WB_OFFSET_DIAG2[cx];
    const RQ           = WB_RQ[cx];
    const BQ           = WB_BQ[cx];
    const BY_PAWN      = WB_PAWN[cx];
    const N            = KNIGHT | byCol;
  
    let fr = 0;
  
    //{{{  pawns
    
    if (b[to+OFFSET_DIAG1] == BY_PAWN || b[to+OFFSET_DIAG2] == BY_PAWN)
      return 1;
    
    //}}}
    //{{{  knights
    
    if ((b[to + -10] == N) ||
        (b[to + -23] == N) ||
        (b[to + -14] == N) ||
        (b[to + -25] == N) ||
        (b[to +  10] == N) ||
        (b[to +  23] == N) ||
        (b[to +  14] == N) ||
        (b[to +  25] == N)) return 1;
    
    //}}}
    //{{{  queen, bishop, rook
    
    fr = to + 1;  while (!b[fr]) fr += 1;  if (RQ[b[fr]]) return 1;
    fr = to - 1;  while (!b[fr]) fr -= 1;  if (RQ[b[fr]]) return 1;
    fr = to + 12; while (!b[fr]) fr += 12; if (RQ[b[fr]]) return 1;
    fr = to - 12; while (!b[fr]) fr -= 12; if (RQ[b[fr]]) return 1;
    
    fr = to + 11; while (!b[fr]) fr += 11; if (BQ[b[fr]]) return 1;
    fr = to - 11; while (!b[fr]) fr -= 11; if (BQ[b[fr]]) return 1;
    fr = to + 13; while (!b[fr]) fr += 13; if (BQ[b[fr]]) return 1;
    fr = to - 13; while (!b[fr]) fr -= 13; if (BQ[b[fr]]) return 1;
    
    //}}}
  
    return 0;
  }
  
  //}}}
  //{{{  isDraw
  
  lozStruct.prototype.isDraw = function () {
  
    if (this.hHistoryNext - this.hHistoryLimit > 100)
      return true;
  
    let count = 0;
  
    for (let i=this.hHistoryNext-5; i >= this.hHistoryLimit; i -= 2) {
  
      if (this.hashEq(this.hHistoryLo[i],this.hHistoryHi[i])) {
        count++;
        if (count == 2) {
          return true;
        }
      }
    }
  
    return false;
  }
  
  //}}}
  
  //{{{  makeMove
  
  lozStruct.prototype.makeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    const toObj = moveToObj(move);
  
    this.hashObj(frObj,fr);
    b[fr] = 0;
    this.hashObj(0,fr);
  
    this.hashObj(toObj,to);
    b[to] = frObj;
    this.hashObj(frObj,to);
  
    this.hashEP();
    this.ep = 0;
    this.hashEP();
  
    if (move & MOVE_IKKY_MASK)
      this.makeIkkyMove(move);
  
    this.hashTurn();
    this.turn = colourToggle(this.turn);
    this.hashTurn();
  
    this.hashRights();
    this.rights &= MASK_RIGHTS[fr] & MASK_RIGHTS[to];
    this.hashRights();
  
    this.hHistoryLo[this.hHistoryNext] = this.hLo[0];
    this.hHistoryHi[this.hHistoryNext] = this.hHi[0];
  
    if ((move & MOVE_REPRESET_MASK) || IS_P[frObj])
      this.hHistoryLimit = this.hHistoryNext;
  
    this.hHistoryNext++;
  
  }
  
  //}}}
  //{{{  makeIkkyMove
  
  lozStruct.prototype.makeIkkyMove = function (move) {
  
    const b = this.board;
  
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    const frCol = objColour(frObj);
  
    if (frCol == WHITE) {
      //{{{  white
      
      if (move & MOVE_KINGMOVE_MASK)
      
        this.kings[0] = to;
      
      if (move & MOVE_EPMAKE_MASK) {
      
        this.hashEP();
        this.ep = to+12;
        this.hashEP();
      
      }
      
      else if (move & MOVE_EPTAKE_MASK) {
      
        this.hashObj(b[to+12],to+12);
        b[to+12] = 0;
        this.hashObj(b[to+12],to+12);
      
      }
      
      else if (move & MOVE_PROMOTE_MASK) {
      
        this.hashObj(b[to],to);
        b[to] = movePromotePiece(move) | WHITE;
        this.hashObj(b[to],to);
      
      }
      
      else if (moveEq(move,MOVE_E1G1)) {
      
        this.hashObj(b[H1],H1);
        b[H1] = 0;
        this.hashObj(b[H1],H1);
      
        this.hashObj(b[F1],F1);
        b[F1] = W_ROOK;
        this.hashObj(b[F1],F1);
      
      }
      
      else if (moveEq(move,MOVE_E1C1)) {
      
        this.hashObj(b[A1],A1);
        b[A1] = 0;
        this.hashObj(b[A1],A1);
      
        this.hashObj(b[D1],D1);
        b[D1] = W_ROOK;
        this.hashObj(b[D1],D1);
      
      }
      
      //}}}
    }
  
    else {
      //{{{  black
      
      if (move & MOVE_KINGMOVE_MASK)
      
        this.kings[1] = to;
      
      if (move & MOVE_EPMAKE_MASK) {
      
        this.hashEP();
        this.ep = to-12;
        this.hashEP();
      
      }
      
      else if (move & MOVE_EPTAKE_MASK) {
      
        this.hashObj(b[to-12],to-12);
        b[to-12] = 0;
        this.hashObj(b[to-12],to-12);
      
      }
      
      else if (move & MOVE_PROMOTE_MASK) {
      
        this.hashObj(b[to],to);
        b[to] = movePromotePiece(move) | BLACK;
        this.hashObj(b[to],to);
      
      }
      
      else if (moveEq(move,MOVE_E8G8)) {
      
        this.hashObj(b[H8],H8);
        b[H8] = 0;
        this.hashObj(b[H8],H8);
      
        this.hashObj(b[F8],F8);
        b[F8] = B_ROOK;
        this.hashObj(b[F8],F8);
      
      }
      
      else if (moveEq(move,MOVE_E8C8)) {
      
        this.hashObj(b[A8],A8);
        b[A8] = 0;
        this.hashObj(b[A8],A8);
      
        this.hashObj(b[D8],D8);
        b[D8] = B_ROOK;
        this.hashObj(b[D8],D8);
      
      }
      
      //}}}
    }
  }
  
  //}}}
  //{{{  unmakeMove
  
  lozStruct.prototype.unmakeMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const toObj = moveToObj(move);
    const frObj = moveFromObj(move);
  
    b[fr] = frObj;
    b[to] = toObj;
  
    if (move & MOVE_IKKY_MASK)
      this.unmakeIkkyMove(move);
  
    this.turn = colourToggle(this.turn);
  
    this.hHistoryNext--;
  }
  
  //}}}
  //{{{  unmakeIkkyMove
  
  lozStruct.prototype.unmakeIkkyMove = function (move) {
  
    const b = this.board;
  
    const fr    = moveFromSq(move);
    const to    = moveToSq(move);
    const frObj = moveFromObj(move);
    const frCol = objColour(frObj);
  
    if (frCol == WHITE) {
      //{{{  white
      
      if (move & MOVE_KINGMOVE_MASK)
      
        this.kings[0] = fr;
      
      if (move & MOVE_EPTAKE_MASK) {
      
        b[to+12] = B_PAWN;
      
      }
      
      else if (moveEq(move,MOVE_E1G1)) {
      
        b[H1] = W_ROOK;
        b[F1] = 0;
      
      }
      
      else if (moveEq(move,MOVE_E1C1)) {
      
        b[A1] = W_ROOK;
        b[D1] = 0;
      
      }
      
      //}}}
    }
  
    else {
      //{{{  black
      
      if (move & MOVE_KINGMOVE_MASK)
      
        this.kings[1] = fr;
      
      if (move & MOVE_EPTAKE_MASK) {
      
        b[to-12] = W_PAWN;
      
      }
      
      else if (moveEq(move,MOVE_E8G8)) {
      
        b[H8] = B_ROOK;
        b[F8] = 0;
      
      }
      
      else if (moveEq(move,MOVE_E8C8)) {
      
        b[A8] = B_ROOK;
        b[D8] = 0;
      
      }
      
      //}}}
    }
  }
  
  //}}}
  //{{{  playMove
  
  lozStruct.prototype.playMove = function (uciMove) {
  
    const node = this.nodes[0];
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    node.ttMove = 0;
  
    node.initMoveGen(ALL_MOVES,inCheck);
  
    let move = 0;
  
    while (move = node.getNextMove()) {
  
      if (formatMove(move) == uciMove) {
        this.makeMove(move);
        return;
      }
    }
  
    console.log('info cannot play uci move', uciMove);
    process.exit();
  }
  
  //}}}
  
  //{{{  hashEq
  
  lozStruct.prototype.hashEq = function (lo, hi) {
  
    return this.hLo[0] == lo && this.hHi[0] == hi;
  
  }
  
  //}}}
  //{{{  hashCalc
  
  lozStruct.prototype.hashCalc = function () {
  
    this.hLo[0] = 0;
    this.hHi[0] = 0;
  
    this.hHistoryLimit = 0;
    this.hHistoryNext  = 0;
  
    for (let i=0; i < 64; i++) {
      let sq  = B88[i];
      let obj = this.board[sq];
      this.hashObj(obj,sq);
    }
  
    this.hashTurn();
    this.hashRights();
    this.hashEP();
  
    this.hHistoryLo[0] = this.hLo[0];
    this.hHistoryHi[0] = this.hHi[0];
  
    this.hHistoryNext++;
  }
  
  //}}}
  //{{{  hashTurn
  
  lozStruct.prototype.hashTurn = function () {
    this.hLo[0] ^= this.hLoTurn[this.turn];
    this.hHi[0] ^= this.hHiTurn[this.turn];
  }
  
  //}}}
  //{{{  hashRights
  
  lozStruct.prototype.hashRights = function () {
    this.hLo[0] ^= this.hLoRights[this.rights];
    this.hHi[0] ^= this.hHiRights[this.rights];
  }
  
  //}}}
  //{{{  hashEP
  
  lozStruct.prototype.hashEP = function () {
    this.hLo[0] ^= this.hLoEP[this.ep];
    this.hHi[0] ^= this.hHiEP[this.ep];
  }
  
  //}}}
  //{{{  hashObj
  
  lozStruct.prototype.hashObj = function (obj, sq) {
    this.hLo[0] ^= this.hLoObj[obj][sq];
    this.hHi[0] ^= this.hHiObj[obj][sq];
  }
  
  //}}}
  
  //{{{  ttInit
  
  lozStruct.prototype.ttInit = function () {
    this.ttFlags.fill(0);
  }
  
  //}}}
  //{{{  ttPut
  
  lozStruct.prototype.ttPut = function (flags, depth, score, move) {
  
    const i = this.hLo[0] & TT_MASK;
  
    this.ttLo[i] = this.hLo[0];
    this.ttHi[i] = this.hHi[0];
  
    this.ttFlags[i] = flags;
    this.ttDepth[i] = depth;
    this.ttScore[i] = score;
    this.ttMove[i]  = move;
  }
  
  //}}}
  //{{{  ttIndex
  
  lozStruct.prototype.ttIndex = function () {
  
    const i = this.hLo[0] & TT_MASK;
  
    if (this.ttFlags[i] && this.hashEq(this.ttLo[i],this.ttHi[i]))
      return i;
    else
      return 0;
  }
  
  //}}}
  
  //{{{  evaluate
  
  lozStruct.prototype.evaluate = function () {
  
    const b = this.board;
  
    const cx = colourMultiplier(this.turn)
  
    let e = 10 * cx;
  
    let pst_mid = 0;
    let pst_end = 0;
  
    let q = 0;
  
    for (let sq=0; sq<64; sq++) {
  
      const fr    = B88[sq];
      const frObj = b[fr];
  
      if (!frObj)
        continue;
  
      const frPiece  = objPiece(frObj) - 1;
      const frColour = objColour(frObj);
      const frIndex  = colourIndex(frColour);
      const frMult   = colourMultiplier(frColour);
  
      e += MATERIAL[frPiece] * frMult;
  
      pst_mid += WB_MID_PST[frIndex][frPiece][fr] * frMult;
      pst_end += WB_END_PST[frIndex][frPiece][fr] * frMult;
  
      q += IS_Q[frObj];
    }
  
    if (q)
      return (e + pst_mid) * cx;
    else
      return (e + pst_end) * cx;
  }
  
  //}}}
  
  //{{{  newGame
  
  lozStruct.prototype.newGame = function () {
    this.ttInit();
  }
  
  //}}}
  //{{{  go
  
  lozStruct.prototype.go = function () {
  
    this.bestMove  = 0;
    this.outOfTime = 0;
    this.nodeCount = 0;
  
    let score = 0;
    let alpha = 0;
    let beta  = 0;
    let delta = 0;
  
    for (let depth=1; depth <= this.targetDepth; depth++) {
  
      alpha = -MATE;
      beta  = MATE;
      delta = 10;
  
      if (depth >= 4) {
        alpha = Math.max(-MATE, score - delta);
        beta  = Math.min(MATE,  score + delta);
      }
  
      while (1) {
  
        score = this.search(this.nodes[0], alpha, beta, depth);
  
        if (this.outOfTime)
          break;
  
        if (score > alpha && score < beta) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'score', score, 'pv', formatMove(this.bestMove));
          break;
        }
  
        delta += delta / 2 | 0;
  
        if (score <= alpha) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'lowerbound', score);
          beta  = Math.min(MATE, ((alpha + beta) / 2) | 0);
          alpha = Math.max(-MATE, score - delta);
        }
        else if (score >= beta) {
          console.log('info', 'depth', depth, 'nodes', this.nodeCount, 'upperbound', score);
          alpha = Math.max(-MATE, ((alpha + beta) / 2) | 0);
          beta  = Math.min(MATE,  score + delta);
        }
      }
  
      if (this.outOfTime)
        break;
    }
  
    console.log('bestmove', formatMove(this.bestMove));
  
    //global.gc();
  }
  
  //}}}
  //{{{  search
  
  lozStruct.prototype.search = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    this.nodeCount++;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return 0;
    }
    
    //}}}
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    if (depth <= 0 && !inCheck)
      return this.qsearch(node.child, alpha, beta, depth);
  
    depth = Math.max(0, depth);
  
    const pvNode = alpha != (beta - 1);
  
    //{{{  check TT
    
    const i = this.ttIndex();
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
    
      if (this.ttDepth[i] >= depth && (depth == 0 || !pvNode)) {
        if (ttFlags == TT_EXACT ||
           (ttFlags == TT_BETA  && ttScore >= beta) ||
           (ttFlags == TT_ALPHA && ttScore <= alpha)) {
          return ttScore;
        }
      }
    
      node.ttMove = this.ttMove[i];
    }
    
    else
      node.ttMove = 0;
    
    //}}}
  
    if (this.isDraw())
      return 0;
  
    const oAlpha   = alpha;
    const rootNode = !node.parent;
  
    let bestScore = -MATE;
    let bestMove  = 0;
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      this.makeMove(move);
  
      if (!(move & MOVE_LEGAL_MASK) && this.isKingAttacked(this.kings[cx], nextTurn)) {
        //{{{  illegal move
        
        this.unmakeMove(move);
        node.cacheUnsave();
        
        continue;
        
        //}}}
      }
  
      played++;
  
      score = -this.search(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return 0;
  
      if (score > bestScore) {
        bestScore = score;
        bestMove  = move;
        if (bestScore > alpha) {
          alpha = bestScore;
          if (rootNode) {
            this.bestMove = bestMove;
          }
          if (bestScore >= beta) {
            this.ttPut(TT_BETA, depth, bestScore, bestMove);
            return bestScore;
          }
        }
      }
    }
  
    if (!played)
      return inCheck ? -MATE + node.ply : 0;
  
    if (alpha > oAlpha)
      this.ttPut(TT_EXACT, depth, bestScore, bestMove);
    else
      this.ttPut(TT_ALPHA, depth, bestScore, bestMove);
  
    return bestScore;
  }
  
  //}}}
  //{{{  qsearch
  
  lozStruct.prototype.qsearch = function (node, alpha, beta, depth) {
  
    //{{{  housekeeping
    
    this.nodeCount++;
    
    if (this.areWeOutOfTime() || !node.child) {
    
      this.outOfTime = 1;
    
      return this.evaluate();
    }
    
    //}}}
  
    //{{{  check TT
    
    const i = this.ttIndex();
    
    if (i) {
    
      const ttFlags = this.ttFlags[i];
      const ttScore = this.ttScore[i];
    
      if (ttFlags == TT_EXACT ||
         (ttFlags == TT_BETA  && ttScore >= beta) ||
         (ttFlags == TT_ALPHA && ttScore <= alpha)) {
        return ttScore;
      }
    
      node.ttMove = this.ttMove[i];
    }
    
    else
      node.ttMove = 0;
    
    //}}}
  
    const e = this.evaluate();
  
    if (e >= beta)
      return e;
  
    if (alpha < e)
      alpha = e;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    let move   = 0;
    let score  = 0;
    let played = 0;
  
    node.cacheSave();
    node.initMoveGen(NOISY_MOVES_ONLY, inCheck);
  
    while (move = node.getNextMove()) {
  
      this.makeMove(move);
  
      if (!(move & MOVE_LEGAL_MASK) && this.isKingAttacked(this.kings[cx], nextTurn)) {
        //{{{  illegal move
        
        this.unmakeMove(move);
        node.cacheUnsave();
        
        continue;
        
        //}}}
      }
  
      played++;
  
      score = -this.qsearch(node.child, -beta, -alpha, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
  
      if (this.outOfTime)
        return alpha;
  
      if (score > alpha) {
        alpha = score;
        if (score >= beta) {
          return score;
        }
      }
    }
  
    return alpha;
  }
  
  //}}}
  //{{{  perft
  
  lozStruct.prototype.perft = function (node, depth) {
  
    if (depth == 0)
      return 1;
  
    const turn     = this.turn;
    const nextTurn = colourToggle(turn);
    const cx       = colourIndex(turn);
    const inCheck  = this.isKingAttacked(this.kings[cx], nextTurn);
  
    let count = 0;
    let move  = 0;
  
    node.ttMove = 0;
  
    node.cacheSave();
    node.initMoveGen(ALL_MOVES, inCheck);
  
    while (move = node.getNextMove()) {
  
      this.makeMove(move);
  
      if (!(move & MOVE_LEGAL_MASK) && this.isKingAttacked(this.kings[cx], nextTurn)) {
        //{{{  illegal move
        
        this.unmakeMove(move);
        node.cacheUnsave();
        
        continue;
        
        //}}}
      }
  
      count += this.perft(node.child, depth-1);
  
      this.unmakeMove(move);
      node.cacheUnsave();
    }
  
    return count;
  }
  
  //}}}
  
  //}}}

  const loz = new(lozStruct);

  loz.initOnce();
  loz.uciArgv();

  //{{{  connect to stdio
  
  process.stdin.setEncoding('utf8');
  
  process.stdin.on('readable', function() {
    let chunk = process.stdin.read();
    process.stdin.resume();
    if (chunk !== null) {
      loz.uciExec(chunk);
    }
  });
  
  process.stdin.on('end', function() {
    process.exit();
  });
  
  //}}}

})();

